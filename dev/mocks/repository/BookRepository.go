// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "library-project/dto"

	entity "library-project/entity"

	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, book
func (_m *BookRepository) Create(ctx context.Context, book dto.BookCreateDTO) (entity.Book, error) {
	ret := _m.Called(ctx, book)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.BookCreateDTO) (entity.Book, error)); ok {
		return rf(ctx, book)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.BookCreateDTO) entity.Book); ok {
		r0 = rf(ctx, book)
	} else {
		r0 = ret.Get(0).(entity.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.BookCreateDTO) error); ok {
		r1 = rf(ctx, book)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx
func (_m *BookRepository) Fetch(ctx context.Context) ([]entity.Book, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Book, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Book); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByID provides a mock function with given fields: ctx, id
func (_m *BookRepository) FetchByID(ctx context.Context, id string) (entity.Book, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FetchByID")
	}

	var r0 entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Book, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Book); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByTitle provides a mock function with given fields: ctx, title
func (_m *BookRepository) FetchByTitle(ctx context.Context, title string) ([]entity.Book, error) {
	ret := _m.Called(ctx, title)

	if len(ret) == 0 {
		panic("no return value specified for FetchByTitle")
	}

	var r0 []entity.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Book, error)); ok {
		return rf(ctx, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Book); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
